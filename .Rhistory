usethis::use_git()
usethis::use_data_raw()
diamonds=diamonds
library("tidyverse")
diamonds=diamonds
pkmn=read_csv("C:/Users/rschn/OneDrive/R archive/Data Repository/Datasets from the internet/pokemon.csv")
View(pkmn)
pkmn$type_1=factor(pkmn$type_1)
pkmn=mutate(across(c(type_level_code,generation,legendary),factor))
pkmn=pkmn %>% mutate(across(c(type_level_code,generation,legendary),factor))
str(pkmn)
use_data(pkmn, overwrite = TRUE)
pacman::p_load(devtools, roxygen2, here)
use_data(pkmn, overwrite = TRUE)
devtools::load_all(".")
pkmn
survey=read_csv("C:/Users/rschn/OneDrive/Ph.D. Program/Teaching/Intro to Stats and Methods in Psych/Intro to stats materials/Administrative/Homework/Data/survey.csv")
View(survey)
View(survey)
survey=survey %>% mutate(across(c(sex,age_group,child,smoke),factor))
str(survey)
str(survey$sex)
usethis::use_data(survey, overwrite = TRUE)
devtools::load_all(".")
survey
####
use_rmarkdown_template(template_name = "Worksheet 1")
library(legaldmlab)
install("Rtools")
install.packages("Rtools")
library(legaldmlab)
pkmn
describe_posterior_fancy_v2
pacman::p_load(roxygen)
library(roxygen2)
setwd("./legaldmlab")
document()
library(devtools)
usethis::use_r("pkmn")
pkmn
library(roxygen2)
document()
library(devtools)
document()
?describe_posterior_fancy()
document()
?describe_posterior_fancy_v2()
document()
?describe_posterior_fancy_v2
usethis::use_r(name = load_bayes_suite)
usethis::use_r()
document()
?load_bayes_suite()
load_bayes_suite()
document()
?find_duplicates
document()
?APA_Bayesian_LogReg
?APAtable_Bayesian_LogReg
devtools::document()
pkmn
?APAtable_Bayesian_LogReg()
devtools::document()
pacman::p_load(devtools,roxygen2)
document()
document()
setwd("C:/Users/rschn/OneDrive/R archive/My R packages/legaldmlab/R")
document()
document()
document()
?convert_spss()
?read_spss
document()
?read_spss
document()
?read_spss
devtools::document()
?find_duplicates()
find_duplicates(mtcars,"cyl")
library("tidyverse")
find_duplicates(mtcars,"cyl")
library(legaldmlab)
library(legaldmlab)
?read_spss
library(easystats)
devtools::install_github("easystats/easystats")
library(legaldmlab)
rstanarm::log_lik()
remotes::install_github("easystats/report")
library(report)
load_analysis_pkgs=function(x){
pacman::p_load(rstanarm,bayestestR,
see,performance,insight,effectsize,parameters,report,
bayesplot,shinystan,tidyverse,flextable,officer)
}
load_analysis_pkgs()
library(usethis)
use_rmarkdown_template(template_name = "modular_index")
library(tidyverse)
devtools::document
devtools::document()
devtools::document()
devtools::document()
pacman::p_load(devtools,usethis)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(legaldmlab)
library(legaldmlab)
?mark_outliers
?find_duplicates
?unique
?unique
?unique
pkmn
devtools::document()
library(legaldmlab)
df=tibble::tribble(~num,
19,
25,
28,
32,
10000)
df %>% legaldmlab::mark_outliers(num, method = double_mads)
pacman::p_load(tidyverse,janitor)
df %>% legaldmlab::mark_outliers(num, method = double_mads)
mark_outliers=function(df,col, method){
if(method==double_mads) { print("still figuring this out")}
if(method==formula) {df=df %>% dplyr::mutate(outlier=dplyr::if_else(round(abs({{col}}-median({{col}}))/(1.483*mad({{col}}, constant = 1)),2)>2.24,1,0))}
return(df)
}
df %>% mark_outliers(num, method = double_mads)
mark_outliers=function(df,col, method){
if(method=double_mads) { print("still figuring this out")}
if(method=formula) {df=df %>% dplyr::mutate(outlier=dplyr::if_else(round(abs({{col}}-median({{col}}))/(1.483*mad({{col}}, constant = 1)),2)>2.24,1,0))}
return(df)
}
df %>% mark_outliers(num, method = double_mads)
df %>% mark_outliers(num, method = formula)
mark_outliers=function(df,col, time_data=TRUE){
if(time_data==TRUE) { print("still figuring this out")}
if(time_data==FALSE) {df=df %>% dplyr::mutate(outlier=dplyr::if_else(round(abs({{col}}-median({{col}}))/(1.483*mad({{col}}, constant = 1)),2)>2.24,1,0))}
return(df)
}
df %>% mark_outliers(num, time_data=TRUE)
devtools::document()
devtools::document()
warnings()
library(legaldmlab)
mark_outliers(pkmn,hp,time_data = FALSE)
devtools::document()
library(legaldmlab)
devtools::document()
pacman::p_load(tidyverse,janitor)
dat=c(1,10,4,2,56,1,4,676,87,98,9)
dat=as.data.frame(dat)
legaldmlab::mark_outliers(dat,value,time_data = FALSE)
View(dat)
legaldmlab::mark_outliers(dat,dat,time_data = FALSE)
View(dat)
devtools::document()
library(legaldmlab)
?read_Qualtrics
?drop_Qualtrics_JunkCols
?drop_testruns
devtools::document()
library(legaldmlab)
?drop_junk_responses
?reformat_Qualtrics_datetime
?mark_outliers
?convert_spss
?find_duplicates
find_duplicates(mtcars,cyl)
library(legaldmlab)
?reformat_Qualtrics_datetime
library(legaldmlab)
devtools::document()
prime_r=function(){
pacman::p_load(tidyverse, janitor, bayestestR, bayesplot, performance, effectsize, rstanarm, see, parameters, insight, report, flextable)
print("Ready!")
}
devtools::document()
library(legaldmlab)
devtools::document()
?legaldmlab::calc.variability.table()
devtools::document()
library(legaldmlab)
?prime_r
devtools::document()
library(legaldmlab)
devtools::document()
devtools::document()
devtools::document()
library(legaldmlab)
devtools::document()
library(legaldmlab)
devtools::document()
library(legaldmlab)
devtools::document()
library(legaldmlab)
devtools::document()
devtools::document()
library(legaldmlab)
devtools::document()
library(legaldmlab)
devtools::document()
library(legaldmlab)
read_Qualtrics=function(file, remove_StartEnd_dates=TRUE){
file=readr::read_csv(file) %>%
janitor::clean_names() %>%
dplyr::select(-c(progress,finished,distribution_channel,user_language,recorded_date, recipient_first_name, recipient_last_name, recipient_email, location_latitude, location_longitude, external_reference, response_id)) %>%
dplyr::slice(3:n()) %>%
reformat_Qualtrics_datetime(., remove_timestamps = TRUE)
#remove all junk responses
file=file[!(file$status==1),]
file=file %>% select(-status)
if("ip_address" %in% colnames(test_full)==TRUE) return(test_full=test_full %>% select(-ip_address)) #logical test to check if IP Address logs exist in data; if true, it drops them.
if(remove_StartEnd_dates==TRUE) return(file=file %>% select(-c(start_date, end_date)))
if(remove_StartEnd_dates==FALSE) return(file)
}
devtools::document()
library(legaldmlab)
devtools::document()
library(legaldmlab)
read_Qualtrics=function(file, remove_StartEnd_dates=TRUE){
file=readr::read_csv(file) %>%
janitor::clean_names() %>%
dplyr::select(-c(progress,finished,distribution_channel,user_language,recorded_date, location_longitude, external_reference, response_id)) %>%
dplyr::slice(3:n()) %>%
reformat_Qualtrics_datetime(., remove_timestamps = TRUE)
#remove all junk responses
file=file[!(file$status==1),]
file=file %>% select(-status)
#logical test to check if various columns exist in data; if true, it drops them.
if("ip_address" %in% colnames(file)==TRUE) return(file=file %>% select(-ip_address))
if("recipient_first_name" %in% colnames(file)==TRUE) return(file=file %>% select(-recipient_first_name))
if("recipient_last_name" %in% colnames(file)==TRUE) return(file=file %>% select(-recipient_last_name))
if("recipient_email" %in% colnames(file)==TRUE) return(file=file %>% select(-recipient_email))
if("location_latitude" %in% colnames(file)==TRUE) return(file=file %>% select(-location_latitude))
if("location_longitude" %in% colnames(file)==TRUE) return(file=file %>% select(-location_longitude))
# date drop check; if true, drop start and end dates for survey responses
if(remove_StartEnd_dates==TRUE) return(file=file %>% select(-c(start_date, end_date)))
if(remove_StartEnd_dates==FALSE) return(file)
}
devtools::document()
library(legaldmlab)
devtools::document()
library(legaldmlab)
devtools::document()
library(legaldmlab)
devtools::document()
library(legaldmlab)
library(roxygen2)
devtools::document()
library(legaldmlab)
devtools::document()
library(legaldmlab)
?write.table
devtools::document()
library(legaldmlab)
devtools::document()
devtools::document()
library(legaldmlab)
devtools::document()
devtools::document()
library(legaldmlab)
openGraph()
openGraph(width = 10, height = 10)
devtools::document()
library(legaldmlab)
usethis::use_r("pkmn")
nrow(pkmn)
nrow(legaldmlab::pkmn)
head(legaldmlab::pkmn)
devtools::document()
?pkmn
legaldmlab::pkmn
devtools::document()
legaldmlab::pkmn
?pkmn
?pkmn
devtools::document()
?pkmn
?legaldmlab::pkmn
library(legaldmlab)
?legaldmlab::pkmn
usethis::use_r("pkmn")
devtools::install_deps(dependencies = TRUE)
1
devtools::install_deps(dependencies = TRUE)
devtools::document()
devtools::document()
?legaldmlab::pkmn
devtools::document()
?legaldmlab::pkmn
